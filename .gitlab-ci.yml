stages:
  - build-test
  - benchmark
  - benchmark-completion

before_script:
  - (cd core-lib && git remote add smarr https://github.com/smarr/SOM.git && git fetch --all) || true
  - git submodule update --init

build-and-test-interpreters:
  stage: build-test
  tags: [yuria2]
  script:
    # Setup

    # when we build mmtk from source locally to debug it
    - git clone https://github.com/mmtk/mmtk-core
    - cd mmtk-core && git checkout v0.29.0 && cd ..

    - cargo clean
    - cargo build --release -p som-interpreter-ast --features=som-gc/marksweep
    - cargo build --release -p som-interpreter-bc --features=som-gc/semispace
    - cargo clippy

    # because the default is semispace at the moment (i'm experimenting with it)
    - RUST_TEST_THREADS=1 cargo test --no-default-features --features som-gc/marksweep

    # Package and Upload
    - lz4 ./target/release/som-interpreter-ast som-interpreter-ast.lz4
    - lz4 ./target/release/som-interpreter-bc som-interpreter-bc.lz4

    - |
      sftp tmp-artifacts << EOF
        -mkdir incoming/${CI_PIPELINE_ID}/
        put som-interpreter-ast.lz4 incoming/${CI_PIPELINE_ID}/
        put som-interpreter-bc.lz4 incoming/${CI_PIPELINE_ID}/
      EOF

benchmark:
  parallel:
    matrix:
      - MACHINE:
          - yuria
          - yuria2
          - yuria3
  stage: benchmark
  tags: [$MACHINE]
  script:
    - sftp tmp-artifacts:incoming/${CI_PIPELINE_ID}/som-interpreter-ast.lz4
    - sftp tmp-artifacts:incoming/${CI_PIPELINE_ID}/som-interpreter-bc.lz4

    - mkdir -p ./target/release
    - lz4 -d som-interpreter-ast.lz4 ./target/release/som-interpreter-ast
    - lz4 -d som-interpreter-bc.lz4 ./target/release/som-interpreter-bc

    - rebench --experiment="CI ID $CI_PIPELINE_ID" --branch="$CI_COMMIT_REF_NAME" -c rebench.conf t:$MACHINE

report-completion:
  stage: benchmark-completion
  tags: [yuria2]
  script:
    - rebench --experiment="CI ID $CI_PIPELINE_ID" --report-completion rebench.conf
